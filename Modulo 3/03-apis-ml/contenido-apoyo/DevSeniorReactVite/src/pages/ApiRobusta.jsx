import React from 'react';
import Slidebar from '../components/Slidebar';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

const codeValidacion = `from pydantic import BaseModel, Field

class IrisRequest(BaseModel):
    # Una flor no puede tener una medida negativa o cero.
    # gt=0 significa "greater than 0".
    sepal_length: float = Field(..., gt=0, description="Largo del s√©palo en cm")
    sepal_width: float  = Field(..., gt=0, description="Ancho del s√©palo en cm")
    petal_length: float = Field(..., gt=0, description="Largo del p√©talo en cm")
    petal_width: float  = Field(..., gt=0, description="Ancho del p√©talo en cm")
`;

const codeErrores = `from fastapi import FastAPI, HTTPException

app = FastAPI()

# Ejemplo de endpoint
@app.get("/items/{item_id}")
def read_item(item_id: int):
    if item_id > 100:
        # Lanza una excepci√≥n con un c√≥digo de estado y un mensaje claro.
        raise HTTPException(status_code=404, detail="El item no fue encontrado")
    return {"item_id": item_id}
`;

const codeLogging = `import logging

# Configuraci√≥n b√°sica del logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Uso del logger
logging.info("La aplicaci√≥n se est√° iniciando.")
try:
    # Alguna operaci√≥n que podr√≠a fallar
    resultado = 10 / 0
except Exception as e:
    logging.error(f"Ocurri√≥ un error inesperado: {e}", exc_info=True)
`;

const codeSolucion = `# Archivo: main.py (Versi√≥n Robusta)

# --- Importaciones ---
import uvicorn
import joblib
import logging
import numpy as np
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field

# --- 1. Configuraci√≥n de Logging ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- 2. Definici√≥n del Modelo de Datos de Entrada con Validaci√≥n Avanzada ---
class IrisRequest(BaseModel):
    sepal_length: float = Field(..., gt=0, description="Largo del s√©palo en cm. Debe ser mayor que 0.")
    sepal_width: float  = Field(..., gt=0, description="Ancho del s√©palo en cm. Debe ser mayor que 0.")
    petal_length: float = Field(..., gt=0, description="Largo del p√©talo en cm. Debe ser mayor que 0.")
    petal_width: float  = Field(..., gt=0, description="Ancho del p√©talo en cm. Debe ser mayor que 0.")

    class Config:
        json_schema_extra = {
            "example": {
                "sepal_length": 5.1, "sepal_width": 3.5,
                "petal_length": 1.4, "petal_width": 0.2
            }
        }

# --- 3. Creaci√≥n de la Aplicaci√≥n y Carga del Modelo ---
app = FastAPI(
    title="API Robusta de Clasificaci√≥n de Flores Iris",
    description="Una API de producci√≥n que utiliza un modelo de ML para predecir la especie de una flor Iris, con validaci√≥n, manejo de errores y logging.",
    version="2.0"
)

# Carga del modelo con manejo de errores
try:
    modelo = joblib.load('clasificador_iris_pipeline.joblib')
    nombres_especies = ['setosa', 'versicolor', 'virginica']
    logging.info("Modelo de ML y nombres de especies cargados exitosamente.")
except FileNotFoundError:
    logging.error("Archivo del modelo 'clasificador_iris_pipeline.joblib' no encontrado.")
    modelo = None
except Exception as e:
    logging.error(f"Error al cargar el modelo: {e}")
    modelo = None

# --- 4. Creaci√≥n del Endpoint de Predicci√≥n Robusto ---
@app.post("/predict")
def predict(request: IrisRequest):
    """
    Recibe las medidas validadas de una flor, realiza una predicci√≥n
    y devuelve la especie junto con la confianza del modelo.
    Maneja errores de forma expl√≠cita.
    """
    # Verificaci√≥n de la disponibilidad del modelo
    if modelo is None:
        raise HTTPException(status_code=503, detail="Servicio no disponible: El modelo de ML no pudo ser cargado.")

    try:
        logging.info(f"Petici√≥n de predicci√≥n recibida: {request.dict()}")

        # Convertir datos de entrada para la predicci√≥n
        data_para_predecir = np.array([[
            request.sepal_length, request.sepal_width,
            request.petal_length, request.petal_width
        ]])

        # Realizar predicci√≥n y obtener probabilidades
        prediccion_numerica = modelo.predict(data_para_predecir)
        probabilidades = modelo.predict_proba(data_para_predecir)
        confianza = float(np.max(probabilidades))
        nombre_predicho = nombres_especies[prediccion_numerica[0]]
        
        logging.info(f"Predicci√≥n exitosa: {nombre_predicho} con confianza {confianza:.4f}")

        # Devolver el resultado
        return {
            "prediction": nombre_predicho,
            "confidence": round(confianza, 4)
        }
    except Exception as e:
        # Si algo sale mal durante la predicci√≥n, se registra y se devuelve un error 500
        logging.error(f"Error durante el proceso de predicci√≥n: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Error interno del servidor al procesar la predicci√≥n.")

@app.get("/")
def read_root():
    """Endpoint ra√≠z que da la bienvenida a la API."""
    return {"message": "Bienvenido a la API de Clasificaci√≥n de Iris v2.0. Visita /docs para la documentaci√≥n interactiva."}
`;

const sectionCard = {
  background: 'var(--bg-secondary, #fff)',
  borderRadius: 16,
  boxShadow: '0 2px 12px rgba(0,0,0,0.07)',
  padding: 32,
  marginBottom: 32,
  border: '1px solid #e5e7eb',
  maxWidth: 1100,
  width: '100%',
  marginLeft: 'auto',
  marginRight: 'auto',
};

const accentTitle = {
  color: '#a259f7',
  display: 'flex',
  alignItems: 'center',
  gap: 10,
  fontWeight: 700,
  fontSize: 24,
  marginBottom: 10,
};

const subtitle = {
  color: '#16a34a',
  fontWeight: 600,
  fontSize: 18,
  margin: '18px 0 8px 0',
  display: 'flex',
  alignItems: 'center',
  gap: 8,
};

const ApiRobusta = ({ isDarkTheme, onToggleTheme }) => (
  <div className="admin-panel">
    <Slidebar open={true} onClose={() => {}} isDarkTheme={isDarkTheme} alwaysVisible={true} />
    <div className="main-content" style={{ marginLeft: 260, maxWidth: '100%', background: 'transparent', minHeight: '100vh', paddingBottom: 60 }}>
      <div style={sectionCard}>
        <div style={accentTitle}>
          <span role="img" aria-label="shield">üõ°Ô∏è</span> Del Prototipo a la Producci√≥n ‚Äì APIs Robustas
        </div>
        <div style={{ fontSize: 17, lineHeight: 1.7 }}>
          <b>Introducci√≥n: ¬øQu√© es el Desarrollo Orientado a Servicios?</b><br/>
          Es un paradigma de desarrollo de software que estructura una aplicaci√≥n como una colecci√≥n de servicios poco acoplados y altamente mantenibles. Nuestro API de predicci√≥n es un ejemplo perfecto de un microservicio: un componente peque√±o, independiente y enfocado en una sola tarea (en este caso, hacer predicciones).<br/><br/>
          Un servicio en producci√≥n no solo debe funcionar en el "caso feliz". De hecho, gran parte del c√≥digo de producci√≥n se dedica a manejar lo inesperado. Aqu√≠ es donde las buenas pr√°cticas se vuelven esenciales.<br/><br/>
          <b>1. Buenas Pr√°cticas para Construir APIs Robustas</b>
          <div style={subtitle}>A. Validaci√≥n Rigurosa de la Entrada</div>
          <i>Principio: "Basura entra, basura sale" (Garbage In, Garbage Out). Nunca conf√≠es en los datos que env√≠a un cliente. Val√≠dalos siempre en el borde de tu aplicaci√≥n.</i><br/><br/>
          FastAPI y Pydantic hacen esto muy f√°cil, pero podemos ir m√°s all√°.<br/><br/>
          <b>C√≥mo:</b> Usa la funci√≥n <b>Field</b> de Pydantic para a√±adir restricciones directamente a tu modelo de datos.<br/>
          <SyntaxHighlighter language="python" style={atomDark} customStyle={{ borderRadius: 10, fontSize: 14, margin: '18px 0' }}>{codeValidacion}</SyntaxHighlighter>
          Si un cliente env√≠a <code>sepal_length: -5</code>, FastAPI autom√°ticamente responder√° con un error 422 Unprocessable Entity detallando el problema, ¬°sin que tengas que escribir una sola l√≠nea de c√≥digo para manejarlo!<br/><br/>
          <div style={subtitle}>B. Manejo Expl√≠cito de Errores</div>
          <i>Principio: Falla con gracia y da informaci√≥n √∫til. Un error 500 Internal Server Error sin contexto es in√∫til para el cliente. Debes capturar errores predecibles y devolver respuestas claras.</i><br/><br/>
          <b>C√≥mo:</b> Usa la excepci√≥n <b>HTTPException</b> de FastAPI.<br/>
          <SyntaxHighlighter language="python" style={atomDark} customStyle={{ borderRadius: 10, fontSize: 14, margin: '18px 0' }}>{codeErrores}</SyntaxHighlighter>
          Esto le da al cliente un c√≥digo de estado est√°ndar (404 Not Found) y un mensaje JSON (<code>{'{"detail": "El item no fue encontrado"}'}</code>) que puede procesar.<br/><br/>
          <div style={subtitle}>C. Logging (Registro de Eventos)</div>
          <i>Principio: Si no est√° en un log, no ocurri√≥. En producci√≥n, no puedes simplemente poner print() en tu c√≥digo. Necesitas un sistema de registro (logging) para diagnosticar problemas.</i><br/><br/>
          <b>C√≥mo:</b> Usa el m√≥dulo <b>logging</b> incorporado de Python.<br/>
          <SyntaxHighlighter language="python" style={atomDark} customStyle={{ borderRadius: 10, fontSize: 14, margin: '18px 0' }}>{codeLogging}</SyntaxHighlighter>
          Los logs te permiten rastrear el flujo de tu aplicaci√≥n, ver las solicitudes que llegan y diagnosticar errores sin detener el servicio.<br/><br/>
          <div style={subtitle}>D. Documentaci√≥n Clara y Consistente</div>
          <i>Principio: Tu API es un producto para otros desarrolladores. La documentaci√≥n no es un extra, es parte de la interfaz.</i><br/><br/>
          <b>C√≥mo:</b> Aprovecha al m√°ximo la autogeneraci√≥n de FastAPI.<br/>
          <ul>
            <li>Usa los par√°metros <b>title</b> y <b>description</b> al crear la instancia de FastAPI.</li>
            <li>A√±ade descripciones a los modelos de Pydantic usando <b>Field</b>.</li>
            <li>Usa <b>docstrings</b> en tus funciones de endpoint para explicar lo que hacen. FastAPI los mostrar√° autom√°ticamente en la documentaci√≥n de <code>/docs</code>.</li>
          </ul>
          <b>2. Ejercicio Pr√°ctico: Mejora de una API para Producci√≥n</b><br/>
          <i>Objetivo:</i> Tomar√°s la API del clasificador de Iris de la clase anterior y la refactorizar√°s para que sea m√°s robusta y est√© lista para un entorno de producci√≥n, aplicando todas las buenas pr√°cticas que acabamos de ver.<br/><br/>
          <b>Tareas a Realizar:</b>
          <ul>
            <li><b>Mejorar la Validaci√≥n:</b> Modifica el modelo IrisRequest en tu archivo main.py. Utiliza Field de Pydantic para asegurar que todas las medidas de la flor sean mayores que cero (gt=0).</li>
            <li><b>A√±adir Manejo de Errores:</b> En el endpoint /predict, envuelve la l√≥gica de predicci√≥n en un bloque try...except. Si ocurre cualquier error inesperado durante la predicci√≥n, captura la excepci√≥n y lanza una HTTPException con status_code=500 y el mensaje "Error interno al procesar la predicci√≥n.".<br/>Mejora el try...except que carga el modelo al inicio. Si el archivo .joblib no se encuentra, la variable modelo ser√° None. Modifica el endpoint /predict para que, si modelo es None, lance inmediatamente una HTTPException con status_code=503 (Service Unavailable) y el mensaje "El modelo de Machine Learning no est√° disponible.".</li>
            <li><b>Implementar Logging:</b> Importa y configura el m√≥dulo logging al principio de tu archivo main.py.<br/>A√±ade un logging.info() para registrar cu√°ndo se carga el modelo exitosamente al inicio.<br/>Dentro del endpoint /predict, a√±ade un logging.info() que registre los datos de la flor que se recibi√≥. Por ejemplo: <code>logging.info(f&quot;Recibida petici√≥n de predicci√≥n: &#123;request.dict()&#125;&quot;)</code>.<br/>En tu nuevo bloque except, antes de lanzar la HTTPException 500, a√±ade un logging.error() para registrar el error completo, incluyendo la traza de la excepci√≥n.</li>
            <li><b>Refinar la Documentaci√≥n:</b> Aseg√∫rate de que tu instancia de FastAPI tenga un title y description claros, y que tu endpoint /predict tenga un docstring explicando su funci√≥n.</li>
          </ul>
          <details style={{ margin: '18px 0' }}>
            <summary style={{ cursor: 'pointer', color: '#a259f7', fontWeight: 600, fontSize: 17 }}>Haz clic aqu√≠ para ver el c√≥digo de la soluci√≥n refactorizada</summary>
            <SyntaxHighlighter language="python" style={atomDark} customStyle={{ borderRadius: 10, fontSize: 14, margin: '18px 0' }}>{codeSolucion}</SyntaxHighlighter>
          </details>
          <div style={{ marginTop: 24, fontWeight: 600, color: '#a259f7', fontSize: 18 }}>
            Al completar este ejercicio, habr√°s transformado un simple prototipo en un servicio robusto, aplicando pr√°cticas que son est√°ndar en la industria del software y MLOps.
          </div>
        </div>
      </div>
    </div>
    <button
      className="theme-toggle-btn"
      onClick={onToggleTheme}
      title={isDarkTheme ? "Cambiar a tema claro" : "Cambiar a tema oscuro"}
    >
      {isDarkTheme ? '‚òÄÔ∏è' : 'üåô'}
    </button>
  </div>
);

export default ApiRobusta; 